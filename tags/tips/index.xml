<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Learn and record</title>
    <link>http://cherishzhang.github.io/tags/tips/index.xml</link>
    <description>Recent content in Tips on Learn and record</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://cherishzhang.github.io/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[tips]日常总结1</title>
      <link>http://cherishzhang.github.io/post/daily_tips_1/</link>
      <pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://cherishzhang.github.io/post/daily_tips_1/</guid>
      <description>

&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;下面笔者会记录一下日常中学习到的小知识点，以备查看。当一些知识储备充足，会系统地再做整理。&lt;/p&gt;

&lt;h2 id=&#34;12-17&#34;&gt;12-17&lt;/h2&gt;

&lt;h4 id=&#34;1-merge-join-concat-in-pandas-http-pandas-pydata-org-pandas-docs-stable-merging-html&#34;&gt;1. &lt;a href=&#34;http://pandas.pydata.org/pandas-docs/stable/merging.html&#34;&gt;merge,join,concat in pandas&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;之前接触过pandas，用的比较多的是merge，对于join的用法一直比较模糊。&lt;/p&gt;

&lt;p&gt;在数据处理和特征挖掘中，表与表之间的连接是一个经常使用的操作。&lt;/p&gt;

&lt;p&gt;函数原型如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;merge(left, right, how=&#39;inner&#39;, on=None, left_on=None,right_on=None,
left_index=False, right_index=False, sort=True, suffixes=(&#39;_x&#39;,&#39;_y&#39;),
copy=True, indicator=False)
join(self,other,on=None,how=&#39;left&#39;,lsuffix=&#39;&#39;,rsuffix=&#39;&#39;, sort=False)
concat(objs, axis=0, join=&#39;outer&#39;,join_axes=None, ignore_index=False,
keys=None, levels=None, names=None, verify_integrity=False,copy=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;r&gt;merge - 通过键值拼接列&lt;/r&gt;&lt;/p&gt;

&lt;p&gt;它类似于关系数据库中的join操作，可以根据一个或多个键将DataFrame中的行拼接起来。&lt;/p&gt;

&lt;p&gt;下面对其中的几个参数做些说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on=None 指定拼接所用列名，如果两个对象的列名不统一，可以分别通过left_on和right_on指定。&lt;/li&gt;
&lt;li&gt;left_index/right_index 用行索引做连接键时，指定为True&lt;/li&gt;
&lt;li&gt;how 当两个表存在不重合的键时，结果的选取方式，&amp;rsquo;inner&amp;rsquo;-交集;&amp;lsquo;outer&amp;rsquo;-并集;&amp;lsquo;left&amp;rsquo;/&amp;lsquo;right&amp;rsquo;分别取一边。&lt;/li&gt;
&lt;li&gt;suffixes=(&amp;rsquo;_x&amp;rsquo;,&amp;rsquo;_y&amp;rsquo;) 当左右表格存在除连接键外的同名列时，通过添加后缀的方式作区分。&lt;/li&gt;
&lt;li&gt;多对多连接，结果为行的笛卡尔积。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;r&gt;join - 索引上的合并，拼接列&lt;/r&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;默认按索引合并，合并相同或相似的索引。&lt;/li&gt;
&lt;li&gt;可以连接多个frame&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;r&gt;concat - 以轴连接多个对象&lt;/r&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;默认axis=0情况下，concat是将objs按照append的方式拼接起来&lt;/li&gt;
&lt;li&gt;axis=1情况下与merge相同。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;12-18&#34;&gt;12-18&lt;/h2&gt;

&lt;h4 id=&#34;1-malloc-realloc-calloc&#34;&gt;1. malloc, realloc, calloc&lt;/h4&gt;

&lt;p&gt;在stdlib.h函数库中，它们的返回值是请求系统分配的地址，如果失败返回NULL。函数原型如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void* malloc(unsigned size);
void* calloc(size_t numElements, size_T sizeOfElement);
void* realloc(void* ptr, unsigned newsize);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;malloc 在内存的动态存储区中分配一块长度为size字节的连续区域，返回该区域的首地址。&lt;/li&gt;
&lt;li&gt;calloc 在内存中申请numElements*sizeOfElement字节大小的连续地址空间。&lt;/li&gt;
&lt;li&gt;realloc 给一个已经分配了地址的指针重新分配空间，参数ptr为原有的空间地址，newsize是重新申请的地址长度。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;区别：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;malloc不能初始化所分配的内存空间，而calloc可以。&lt;/li&gt;
&lt;li&gt;realloc可以对给定指针所指的空间进行扩大或者缩小，但原有内容保持不变。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;12-25&#34;&gt;12-25&lt;/h2&gt;

&lt;h4 id=&#34;1-histogram&#34;&gt;1. histogram&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;##Compute the histogram of a set of data
numpy.histogram(a, bins=10, range=None, normed=False, weights=None, density=None)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hitogram对数组a进行直方图统计，将数组a的取值范围分为bins个区间，并统计a中的每个值落入各个区间中的次数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;##examples
import numpy as np
import matplotlib.pyplot as plt
np.histogram([1,2,3,1,2,4], bins=[0,1,2,3])
plt.hist([1,2,3,1,2,4], bins=3)
plt.title(&amp;quot;Histogram with 3 bins&amp;quot;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>